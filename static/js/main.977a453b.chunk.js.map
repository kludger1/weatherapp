{"version":3,"sources":["components/NowWeather.js","components/DailyWeather.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["nowWeather","_ref","weather","react_default","a","createElement","className","city","country","src","concat","icon","alt","hi","realFeel","phrase","Day","days","kelvintofaren","map","day","key","dt","dt_txt","slice","main","temp_max","temp_min","description","dailyWeather","_ref2","findHourlyData","DailyWeather_Day","list","Search","state","zipCode","countryCode","handleChange","e","_this","setState","Object","defineProperty","target","id","value","handleSubmit","preventDefault","props","getWeather","onSubmit","this","type","placeholder","onChange","Component","API_KEY","App","clickedDay","kelvin","Math","round","_callee","location","apiCall","info","regenerator_default","wrap","_context","prev","next","fetch","sent","json","objectSpread","name","stop","hourlyData","daily","find","NowWeather","components_Search","DailyWeather","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.977a453b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst nowWeather = ({ weather }) => {\r\n    return (\r\n        <div className=\"now block flex-row-space-evenly scroll\">\r\n            <h1 className=\"now__location\" >{weather.city}, {weather.country}</h1>\r\n            <div className=\"flex-row-center\">\r\n                <div className=\"now__icon\">\r\n                    <img className=\"now__icon-img icon\" src={`http://openweathermap.org/img/w/${weather.icon}.png`} alt=\"cloud-icon\" />\r\n                </div>\r\n                <div className=\"now__info flex-column-center\">\r\n                    <div className=\"now__info-temp\">\r\n                        <div className=\"now__info-temp-hi\">{weather.hi}°<span className=\"now-info-temp-hi-label\">F</span></div>\r\n                    </div>\r\n                    <div className=\"now__info-realfeel\">RealFeel® {weather.realFeel}°</div>\r\n                    <div className=\"now__info-phrase\">{weather.phrase}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default nowWeather","import React from 'react'\r\n\r\n\r\nconst Day = ({days, kelvintofaren}) => {\r\n    const daysArr = days.map(day => {\r\n        return (\r\n        <div className=\"day flex-column-left\" key={day.dt} >\r\n            <div className=\"day__name-date-conatiner\">\r\n                <p className=\"day__name\">{day.dt_txt.slice(0,10)}</p>\r\n                <p className=\"day__date\">{day.dt_txt.slice(12,16)}</p>\r\n            </div>\r\n            <div className=\"day__icon-box\">\r\n                <img className=\"icon\" src={`http://openweathermap.org/img/w/${day.weather[0].icon}.png`} alt=\"Weather Icon\" />\r\n            </div>\r\n            <div className=\"day__temp-box\">\r\n                <div className=\"temp\">\r\n                    <span className=\"day__temp-hi\">{kelvintofaren(day.main.temp_max)}°</span> / <span className=\"day_day-temp-low\">{kelvintofaren(day.main.temp_min)}°</span>\r\n                </div>\r\n                <div className=\"day__phrase\">{day.weather[0].description}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n    })\r\n\r\n    return daysArr\r\n    \r\n}\r\n\r\n\r\nconst dailyWeather = ({weather,findHourlyData, kelvintofaren}) => {\r\n    return (\r\n        <div className=\"daily block\">\r\n            <h1 className=\"daily__header\">Daily</h1>\r\n            <hr />\r\n            <div className=\"daily__day scroll \">\r\n                <Day kelvintofaren={kelvintofaren} days={weather.list} findHourlyData={findHourlyData}/>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default dailyWeather","import React, { Component } from 'react';\r\n\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        zipCode: null,\r\n        countryCode: null,\r\n        \r\n    }\r\n\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // this.props.updateLocation(this.state);\r\n        this.props.getWeather(this.state);\r\n        this.setState({\r\n            zipCode:'',\r\n            countryCode:'',\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"block\">\r\n                <form className=\"form flex-row-space-evenly\" onSubmit={this.handleSubmit}>\r\n                    <input className=\"search\" id=\"zipCode\" type=\"text\" placeholder=\"zip code\" value={this.state.zipCode} onChange={this.handleChange} />\r\n                    <input className=\"search\" id=\"countryCode\" type=\"text\" placeholder=\"country code\" value={this.state.countryCode} onChange={this.handleChange} />\r\n                    <button className=\"btn\">Search</button>\r\n                </form>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default Search","import React, { Component } from 'react';\nimport './normalize.css';\nimport './skeleton.css';\nimport './App.css';\n\n\n\nimport NowWeather from './components/NowWeather';\nimport DailyWeather from './components/DailyWeather';\n// import HourlyWeather from './components/HourlyWeather';\nimport Search from './components/Search';\n\nconst API_KEY = \"ea70246fb0d2f4bb2ad58b4e88390364\"\n\nclass App extends Component {\n\n\n\n\n  state = {\n    clickedDay: null,\n    weather: {\n      city: null,\n      country: null,\n      icon: \"http://openweathermap.org/img/w/04n.png\",\n      hi: 79,\n      realFeel: 78,\n      phrase: \"Mostly cloudy\",\n      list: [],\n    },\n    // daily: [\n    //   { id: 1, name: \"Today\", date: \"Mar 9\", icon: \"https://cdn4.iconfinder.com/data/icons/weather-line-set/24/icn-weather-scattered-showers-512.png\", hi: 82, low: 74, phrase: \"Partly sunny\" },\n    //   { id: 2, name: \"Monday\", date: \"Mar 10\", icon: \"https://cdn4.iconfinder.com/data/icons/weather-line-set/24/icn-weather-scattered-showers-512.png\", hi: 83, low: 74, phrase: \"Partly sunny\" },\n    //   { id: 3, name: \"Tuesday\", date: \"Mar 11\", icon: \"https://cdn4.iconfinder.com/data/icons/weather-line-set/24/icn-weather-scattered-showers-512.png\", hi: 83, low: 71, phrase: \"A morning shower possible\" },\n    //   { id: 4, name: \"Wednesday\", date: \"Mar 12\", icon: \"https://cdn4.iconfinder.com/data/icons/weather-line-set/24/icn-weather-scattered-showers-512.png\", hi: 83, low: 73, phrase: \"Partly sunny\" },\n    //   { id: 5, name: \"Thursday\", date: \"Mar 13\", icon: \"https://cdn4.iconfinder.com/data/icons/weather-line-set/24/icn-weather-scattered-showers-512.png\", hi: 80, low: 72, phrase: \"A passing morning shower\" },\n    //   { id: 6, name: \"Friday\", date: \"Mar 14\", icon: \"https://cdn4.iconfinder.com/data/icons/weather-line-set/24/icn-weather-scattered-showers-512.png\", hi: 83, low: 72, phrase: \"Mostly cloudy\" },\n    //   { id: 7, name: \"Saturday\", date: \"Mar 15\", icon: \"https://cdn4.iconfinder.com/data/icons/weather-line-set/24/icn-weather-scattered-showers-512.png\", hi: 82, low: 73, phrase: \"Mostly cloudy\" }\n    // ]\n  }\n\n  // componentDidMount() {\n  //   axios.get(`https://api.openweathermap.org/data/2.5/weather?zip=32218,us&appid=${API_KEY}`)\n  //   .then(res => {\n  //     this.setState({\n  //       city: res.name\n  //     })\n  //   })\n  // }\n\n\n\n  kelvintofaren = (kelvin) => {\n    return Math.round((kelvin * 9 / 5) - 459.67)\n\n  }\n\n  getWeather = async (location) => {\n    let zipCode = location.zipCode\n    let countryCode = location.countryCode\n    const apiCall = await fetch(`https://api.openweathermap.org//data/2.5/forecast?zip=${zipCode},${countryCode}&appid=${API_KEY}`);\n    const info = await apiCall.json();\n    if (zipCode && countryCode) {\n      // console.log(info)\n      // console.log(info.main.weather[0].icon)\n      let weather = { ...this.state.weather }\n      weather.city = info.city.name;\n      weather.country = info.city.country;\n      weather.icon = info.list[0].weather[0].icon;\n      weather.hi = this.kelvintofaren(info.list[0].main.temp_max);\n      weather.realFeel = this.kelvintofaren(info.list[0].main.temp_min);\n      weather.phrase = info.list[0].weather[0].description;\n      weather.list = info.list.slice(0,7)\n      this.setState({\n        weather: weather\n      })\n    }\n\n  }\n\n\n  findHourlyData = (id) => {\n    const hourlyData = this.state.daily.find(day => {\n      return id === day.id\n    });\n    this.setState({\n      clickedDay: hourlyData\n    });\n  };\n\n  // updateLocation = (location) => {\n  //   let now = { ...this.state.now }\n  //   now.city = location.city\n  //   now.state = location.state\n  //   this.setState({\n  //     now: now\n  //   })\n  // }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"app-container flex-column-center\">\n          {this.state.weather.city ? <NowWeather weather={this.state.weather} /> : <p className=\"block center red\" >Input a zip code and country code...</p>}\n          <Search getWeather={this.getWeather} />\n          <DailyWeather weather={this.state.weather} findHourlyData={this.findHourlyData} kelvintofaren={this.kelvintofaren} />\n          {/* {this.state.clickedDay ? <HourlyWeather clickedDay={this.state.clickedDay} /> : <p className=\"block center\" >Click a day...</p>} */}\n\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}